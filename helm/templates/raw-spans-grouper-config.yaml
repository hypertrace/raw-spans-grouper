apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.rawSpansGrouperConfig.name }}
  labels:
    release: {{ .Release.Name }}
data:
  application.conf: |-

    kafka.streams.config = {
      application.id = raw-spans-to-structured-traces-grouping-job
      state.dir = "/var/data/"
      metrics.recording.level = "{{ .Values.rawSpansGrouperConfig.kafka.streams.config.metricsRecordingLevel }}"
      num.stream.threads = "{{ .Values.rawSpansGrouperConfig.kafka.streams.config.numStreamThreads }}"
      producer.compression.type = gzip
      producer.max.request.size = 10485760
      topology.optimization = all
      bootstrap.servers = "{{ .Values.rawSpansGrouperConfig.kafka.streams.config.bootstrapServers }}"
      auto.offset.reset = "latest"
      auto.commit.interval.ms = 5000
      schema.registry.url = "{{ .Values.rawSpansGrouperConfig.kafka.streams.config.schemaRegistryUrl }}"
      specific.avro.reader = true

      rocksdb.block.cache.size = {{ int .Values.rawSpansGrouperConfig.kafka.streams.config.rocksdbBlockCacheSize }}
      rocksdb.write.buffer.size = {{ int .Values.rawSpansGrouperConfig.kafka.streams.config.rocksdbWriteBufferSize }}
      rocksdb.max.write.buffers = {{ int .Values.rawSpansGrouperConfig.kafka.streams.config.rocksdbMaxWriteBuffers }}
      rocksdb.cache.index.and.filter.blocks = {{ int .Values.rawSpansGrouperConfig.kafka.streams.config.rocksdbCacheIndexAndFilterBlocks }}
    }

    span.groupby.session.window.interval = {{ .Values.rawSpansGrouperConfig.span.groupby.internal }}

    {{- if hasKey .Values.rawSpansGrouperConfig "metrics" }}
    metrics {
      reporter {
        names = {{- toJson .Values.rawSpansGrouperConfig.metrics.reporter.names | trim | nindent 12 }}
      }
    }
    {{- end }}
